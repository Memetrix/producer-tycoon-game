#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π —Ç—Ä–µ–∫ –∏ —Å–æ–∑–¥–∞—ë—Ç beatmap —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Ä–∏—Ç–º–∏—á–µ—Å–∫–∏–º–∏ –º–æ–º–µ–Ω—Ç–∞–º–∏
"""
import librosa
import numpy as np
import json
import sys

def analyze_track(audio_file):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç—Ä–µ–∫ –∏ –Ω–∞—Ö–æ–¥–∏—Ç –≤—Å–µ —Ä–∏—Ç–º–∏—á–µ—Å–∫–∏–µ –º–æ–º–µ–Ω—Ç—ã"""
    print(f"üéµ –ó–∞–≥—Ä—É–∂–∞–µ–º: {audio_file}")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞—É–¥–∏–æ
    y, sr = librosa.load(audio_file, sr=44100)
    duration = librosa.get_duration(y=y, sr=sr)
    print(f"‚è±Ô∏è  –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration:.2f}s")
    
    # 1. –û–ø—Ä–µ–¥–µ–ª—è–µ–º BPM (—Ç–µ–º–ø)
    tempo, beats = librosa.beat.beat_track(y=y, sr=sr, units='time')
    tempo = float(np.mean(tempo)) if isinstance(tempo, np.ndarray) else float(tempo)
    print(f"üéº BPM: {tempo:.1f}")
    print(f"ü•Å –ù–∞–π–¥–µ–Ω–æ beats: {len(beats)}")
    
    # 2. Onset detection - –Ω–∞—Ö–æ–¥–∏–º –≤—Å–µ –∞—Ç–∞–∫–∏/—É–¥–∞—Ä—ã
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π
    onset_env = librosa.onset.onset_strength(y=y, sr=sr)
    
    # Strong onsets (–æ—Å–Ω–æ–≤–Ω—ã–µ —É–¥–∞—Ä—ã - kick, snare)
    onsets_strong = librosa.onset.onset_detect(
        onset_envelope=onset_env,
        sr=sr,
        units='time',
        backtrack=True,
        pre_max=20,
        post_max=20,
        pre_avg=100,
        post_avg=100,
        delta=0.2,
        wait=10
    )
    
    # Weak onsets (hi-hats, –ø–µ—Ä–∫—É—Å—Å–∏—è)
    onsets_weak = librosa.onset.onset_detect(
        onset_envelope=onset_env,
        sr=sr,
        units='time',
        backtrack=True,
        pre_max=10,
        post_max=10,
        pre_avg=50,
        post_avg=50,
        delta=0.1,
        wait=5
    )
    
    print(f"üí• Strong onsets: {len(onsets_strong)}")
    print(f"‚ú® Weak onsets: {len(onsets_weak)}")
    
    # 3. –°–ø–µ–∫—Ç—Ä–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–æ–≤ —É–¥–∞—Ä–æ–≤
    # –ù–∏–∑–∫–∏–µ —á–∞—Å—Ç–æ—Ç—ã = kick, —Å—Ä–µ–¥–Ω–∏–µ = snare, –≤—ã—Å–æ–∫–∏–µ = hi-hat
    S = np.abs(librosa.stft(y))
    
    def classify_onset(time_sec):
        """–ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç —Ç–∏–ø —É–¥–∞—Ä–∞ –ø–æ —á–∞—Å—Ç–æ—Ç–Ω–æ–º—É —Å–ø–µ–∫—Ç—Ä—É"""
        frame = librosa.time_to_frames(time_sec, sr=sr)
        if frame >= S.shape[1]:
            frame = S.shape[1] - 1
            
        spectrum = S[:, frame]
        
        # –î–µ–ª–∏–º —Å–ø–µ–∫—Ç—Ä –Ω–∞ —á–∞—Å—Ç–æ—Ç–Ω—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã
        low = np.mean(spectrum[0:50])      # Kick (–Ω–∏–∑–∫–∏–µ)
        mid = np.mean(spectrum[50:150])    # Snare (—Å—Ä–µ–¥–Ω–∏–µ)
        high = np.mean(spectrum[150:300])  # Hi-hat (–≤—ã—Å–æ–∫–∏–µ)
        
        total = low + mid + high
        if total == 0:
            return 'note'
            
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ–º–∏–Ω–∏—Ä—É—é—â—É—é —á–∞—Å—Ç–æ—Ç—É
        if low > mid * 1.5 and low > high * 1.5:
            return 'kick'
        elif mid > low * 1.2 and mid > high * 1.2:
            return 'snare'
        elif high > low * 1.2 and high > mid * 1.2:
            return 'hihat'
        else:
            return 'note'
    
    # 4. –°–æ–∑–¥–∞—ë–º beatmap
    beatmap = {
        'metadata': {
            'title': 'Infernal Pulse',
            'artist': 'Suno AI',
            'duration': duration,
            'bpm': float(tempo)
        },
        'timing': {
            'beats': beats.tolist(),  # –û—Å–Ω–æ–≤–Ω–∞—è –º–µ—Ç—Ä–∏—á–µ—Å–∫–∞—è —Å–µ—Ç–∫–∞
        },
        'notes': []
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–ª—å–Ω—ã–µ —É–¥–∞—Ä—ã (–æ—Å–Ω–æ–≤–Ω–æ–π —Ç—Ä–µ–∫)
    for onset_time in onsets_strong:
        note_type = classify_onset(onset_time)
        beatmap['notes'].append({
            'time': float(onset_time),
            'type': note_type,
            'strength': 'strong'
        })
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–∞–±—ã–µ —É–¥–∞—Ä—ã (–¥–ª—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏)
    for onset_time in onsets_weak:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–µ –¥—É–±–ª–∏—Ä—É–µ–º —Å–∏–ª—å–Ω—ã–π —É–¥–∞—Ä
        if not any(abs(n['time'] - onset_time) < 0.05 for n in beatmap['notes']):
            note_type = classify_onset(onset_time)
            beatmap['notes'].append({
                'time': float(onset_time),
                'type': note_type,
                'strength': 'weak'
            })
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    beatmap['notes'].sort(key=lambda x: x['time'])
    
    print(f"\nüìù –°–æ–∑–¥–∞–Ω–æ –Ω–æ—Ç: {len(beatmap['notes'])}")
    print(f"üìä –°—Ä–µ–¥–Ω—è—è –ø–ª–æ—Ç–Ω–æ—Å—Ç—å: {len(beatmap['notes'])/duration:.1f} –Ω–æ—Ç/—Å–µ–∫")
    
    return beatmap

def create_osu_beatmap(beatmap, output_file):
    """–°–æ–∑–¥–∞—ë—Ç .osu —Ñ–∞–π–ª –¥–ª—è –∏–≥—Ä—ã"""
    osu_content = f"""osu file format v14

[General]
AudioFilename: audio.mp3
Mode: 0

[Metadata]
Title:{beatmap['metadata']['title']}
Artist:{beatmap['metadata']['artist']}

[Difficulty]
HPDrainRate:5
CircleSize:4
OverallDifficulty:7
ApproachRate:8
SliderMultiplier:1.4
SliderTickRate:1

[TimingPoints]
0,{60000/beatmap['metadata']['bpm']:.2f},4,2,0,50,1,0

[HitObjects]
"""
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ—Ç—ã
    for note in beatmap['notes']:
        time_ms = int(note['time'] * 1000)
        # –ü–æ–∑–∏—Ü–∏—è –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–∏–ø–∞
        positions = {
            'kick': (256, 192),    # –¶–µ–Ω—Ç—Ä
            'snare': (128, 192),   # –°–ª–µ–≤–∞
            'hihat': (384, 192),   # –°–ø—Ä–∞–≤–∞
            'note': (256, 192)     # –¶–µ–Ω—Ç—Ä
        }
        x, y = positions.get(note['type'], (256, 192))
        
        # type,combo (1=circle, 5=new combo)
        hit_type = 1 if note['strength'] == 'weak' else 5
        osu_content += f"{x},{y},{time_ms},{hit_type},0,0:0:0:0:\n"
    
    with open(output_file, 'w') as f:
        f.write(osu_content)
    
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω OSU beatmap: {output_file}")

def create_simplified_beatmap(beatmap, difficulty='normal'):
    """–°–æ–∑–¥–∞—ë—Ç —É–ø—Ä–æ—â—ë–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏"""
    notes = beatmap['notes'].copy()
    
    if difficulty == 'easy':
        # –¢–æ–ª—å–∫–æ —Å–∏–ª—å–Ω—ã–µ —É–¥–∞—Ä—ã, kick –∏ snare
        notes = [n for n in notes if n['strength'] == 'strong' and n['type'] in ['kick', 'snare']]
    elif difficulty == 'normal':
        # –°–∏–ª—å–Ω—ã–µ —É–¥–∞—Ä—ã + –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–ª–∞–±—ã–µ
        strong_notes = [n for n in notes if n['strength'] == 'strong']
        weak_notes = [n for n in notes if n['strength'] == 'weak']
        # –ë–µ—Ä—ë–º –∫–∞–∂–¥—ã–π –≤—Ç–æ—Ä–æ–π —Å–ª–∞–±—ã–π —É–¥–∞—Ä
        weak_notes = weak_notes[::2]
        notes = strong_notes + weak_notes
        notes.sort(key=lambda x: x['time'])
    # hard = –≤—Å–µ –Ω–æ—Ç—ã
    
    simplified = beatmap.copy()
    simplified['notes'] = notes
    simplified['metadata']['difficulty'] = difficulty
    
    return simplified

if __name__ == '__main__':
    if len(sys.argv) < 2:
        print("Usage: python beatmap_analyzer.py <audio_file>")
        sys.exit(1)
    
    audio_file = sys.argv[1]
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º
    beatmap = analyze_track(audio_file)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º JSON
    json_file = '/home/claude/beatmap_full.json'
    with open(json_file, 'w') as f:
        json.dump(beatmap, f, indent=2)
    print(f"üíæ –°–æ—Ö—Ä–∞–Ω—ë–Ω JSON: {json_file}")
    
    # –°–æ–∑–¥–∞—ë–º OSU —Ñ–∞–π–ª
    osu_file = '/home/claude/beatmap.osu'
    create_osu_beatmap(beatmap, osu_file)
    
    # –°–æ–∑–¥–∞—ë–º —É–ø—Ä–æ—â—ë–Ω–Ω—ã–µ –≤–µ—Ä—Å–∏–∏
    for difficulty in ['easy', 'normal', 'hard']:
        simplified = create_simplified_beatmap(beatmap, difficulty)
        diff_file = f'/home/claude/beatmap_{difficulty}.json'
        with open(diff_file, 'w') as f:
            json.dump(simplified, f, indent=2)
        print(f"üíæ {difficulty.upper()}: {len(simplified['notes'])} –Ω–æ—Ç")
