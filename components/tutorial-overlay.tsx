"use client"

import { useState, useEffect } from "react"
import { Button } from "@/components/ui/button"
import { Card } from "@/components/ui/card"
import { X, ArrowRight, CheckCircle2 } from "lucide-react"

interface TutorialStep {
  id: string
  title: string
  description: string
  highlightElement?: string // CSS selector for element to highlight
  position: "top" | "center" | "bottom"
  action?: "tap" | "swipe" | "none"
}

const TUTORIAL_STEPS: TutorialStep[] = [
  {
    id: "welcome",
    title: "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!",
    description:
      "–¢—ã –Ω–∞—á–∏–Ω–∞–µ—à—å —Å–≤–æ–π –ø—É—Ç—å –æ—Ç —É–ª–∏—á–Ω–æ–≥–æ –±–∏—Ç–º–µ–π–∫–µ—Ä–∞ –¥–æ –º–∏—Ä–æ–≤–æ–≥–æ –ø—Ä–æ–¥—é—Å–µ—Ä–∞. –î–∞–≤–∞–π –ø–æ–∫–∞–∂—É –∫–∞–∫ –∏–≥—Ä–∞—Ç—å!",
    position: "center",
    action: "none",
  },
  {
    id: "energy",
    title: "–≠–Ω–µ—Ä–≥–∏—è",
    description:
      "–≠–Ω–µ—Ä–≥–∏—è –Ω—É–∂–Ω–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–∏—Ç–æ–≤. –û–Ω–∞ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ (2/–º–∏–Ω). –°–ª–µ–¥–∏ –∑–∞ –Ω–µ–π –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É!",
    position: "top",
    action: "none",
  },
  {
    id: "create-beat",
    title: "–°–æ–∑–¥–∞—Ç—å –±–∏—Ç",
    description:
      '–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É "–°–æ–∑–¥–∞—Ç—å –±–∏—Ç" —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å! –í—ã–±–µ—Ä–∏ —Ç—Ä–µ–∫ –∏ —Å–ª–æ–∂–Ω–æ—Å—Ç—å. –ß–µ–º —Å–ª–æ–∂–Ω–µ–µ - —Ç–µ–º –≤—ã—à–µ —Ü–µ–Ω–∞ –±–∏—Ç–∞!',
    position: "center",
    action: "tap",
  },
  {
    id: "rhythm-game",
    title: "–†–∏—Ç–º-–∏–≥—Ä–∞",
    description:
      "–í —Ä–∏—Ç–º-–∏–≥—Ä–µ –Ω–∞–∂–∏–º–∞–π –∫–Ω–æ–ø–∫–∏ D, F, J, K (–∏–ª–∏ —Ç–∞–ø–∞–π –Ω–∞ —ç–∫—Ä–∞–Ω–µ) –≤ —Ç–∞–∫—Ç –º—É–∑—ã–∫–µ. –ü–æ–ø–∞–¥–∞–π —Ç–æ—á–Ω–æ —á—Ç–æ–±—ã –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –±–æ–ª—å—à–µ!",
    position: "bottom",
    action: "tap",
  },
  {
    id: "quality-price",
    title: "–ö–∞—á–µ—Å—Ç–≤–æ = –î–µ–Ω—å–≥–∏",
    description:
      "–¢–≤–æ—è —Ç–æ—á–Ω–æ—Å—Ç—å –≤ —Ä–∏—Ç–º-–∏–≥—Ä–µ –≤–ª–∏—è–µ—Ç –Ω–∞ –∫–∞—á–µ—Å—Ç–≤–æ –±–∏—Ç–∞ (20-100%). –ß–µ–º –≤—ã—à–µ –∫–∞—á–µ—Å—Ç–≤–æ - —Ç–µ–º –≤—ã—à–µ —Ü–µ–Ω–∞ –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ!",
    position: "center",
    action: "none",
  },
  {
    id: "reputation",
    title: "–†–µ–ø—É—Ç–∞—Ü–∏—è",
    description:
      "–ó–∞ –∫–∞–∂–¥—ã–π –ø—Ä–æ–¥–∞–Ω–Ω—ã–π –±–∏—Ç —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å —Ä–µ–ø—É—Ç–∞—Ü–∏—é (–∫–∞—á–µ—Å—Ç–≤–æ/5). –†–µ–ø—É—Ç–∞—Ü–∏—è –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏!",
    position: "top",
    action: "none",
  },
  {
    id: "upgrades",
    title: "–£–ª—É—á—à–µ–Ω–∏—è",
    description:
      "–ü–æ–∫—É–ø–∞–π –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ (–°—Ç—É–¥–∏—è), –Ω–∞–Ω–∏–º–∞–π –∞—Ä—Ç–∏—Å—Ç–æ–≤ –¥–ª—è –ø–∞—Å—Å–∏–≤–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞, –∏–∑—É—á–∞–π –Ω–∞–≤—ã–∫–∏ –¥–ª—è –±–æ–Ω—É—Å–æ–≤!",
    position: "center",
    action: "none",
  },
  {
    id: "contracts",
    title: "–ö–æ–Ω—Ç—Ä–∞–∫—Ç—ã",
    description:
      "–ü–æ—Å–ª–µ 500 —Ä–µ–ø—É—Ç–∞—Ü–∏–∏ (Tier 2) –ø–æ–ª—É—á–∞–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã –æ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤! –í—ã–ø–æ–ª–Ω—è–π –∏—Ö –¥–ª—è –±–æ–ª—å—à–∏—Ö –Ω–∞–≥—Ä–∞–¥.",
    position: "center",
    action: "none",
  },
  {
    id: "ready",
    title: "–ì–æ—Ç–æ–≤!",
    description:
      "–¢–µ–ø–µ—Ä—å —Ç—ã –∑–Ω–∞–µ—à—å –æ—Å–Ω–æ–≤—ã! –°–æ–∑–¥–∞–≤–∞–π –±–∏—Ç—ã, –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π –¥–µ–Ω—å–≥–∏, –ø–æ–≤—ã—à–∞–π —Ä–µ–ø—É—Ç–∞—Ü–∏—é. –£–¥–∞—á–∏ –Ω–∞ –ø—É—Ç–∏ –∫ —Å–ª–∞–≤–µ! üéµ",
    position: "center",
    action: "none",
  },
]

interface TutorialOverlayProps {
  onComplete: () => void
  onSkip: () => void
}

export function TutorialOverlay({ onComplete, onSkip }: TutorialOverlayProps) {
  const [currentStep, setCurrentStep] = useState(0)
  const [isVisible, setIsVisible] = useState(true)

  const step = TUTORIAL_STEPS[currentStep]
  const isLastStep = currentStep === TUTORIAL_STEPS.length - 1

  const handleNext = () => {
    if (isLastStep) {
      setIsVisible(false)
      setTimeout(onComplete, 300)
    } else {
      setCurrentStep((prev) => prev + 1)
    }
  }

  const handleSkip = () => {
    setIsVisible(false)
    setTimeout(onSkip, 300)
  }

  const getPositionClasses = () => {
    switch (step.position) {
      case "top":
        return "top-20"
      case "bottom":
        return "bottom-28"
      case "center":
      default:
        return "top-1/2 -translate-y-1/2"
    }
  }

  if (!isVisible) return null

  return (
    <div className="fixed inset-0 z-[100] pointer-events-auto">
      {/* Semi-transparent overlay */}
      <div className="absolute inset-0 bg-black/70 backdrop-blur-sm" onClick={handleSkip} />

      {/* Tutorial card */}
      <div className={`absolute left-4 right-4 ${getPositionClasses()} pointer-events-auto`}>
        <Card className="p-6 bg-gradient-to-br from-card via-card to-primary/10 border-primary/30 shadow-2xl animate-slide-in-up">
          <div className="flex items-start justify-between mb-4">
            <div className="flex items-center gap-2">
              <div className="w-8 h-8 rounded-full bg-primary/20 flex items-center justify-center">
                <span className="text-sm font-bold text-primary">
                  {currentStep + 1}/{TUTORIAL_STEPS.length}
                </span>
              </div>
              <h2 className="text-xl font-semibold">{step.title}</h2>
            </div>
            <Button variant="ghost" size="icon" onClick={handleSkip} className="flex-shrink-0">
              <X className="w-5 h-5" />
            </Button>
          </div>

          <p className="text-sm text-muted-foreground leading-relaxed mb-6">{step.description}</p>

          {/* Action hint */}
          {step.action !== "none" && (
            <div className="mb-4 p-3 rounded-lg bg-accent/10 border border-accent/20">
              <p className="text-xs font-semibold text-accent flex items-center gap-2">
                {step.action === "tap" && (
                  <>
                    <span className="text-lg">üëÜ</span>
                    –ù–∞–∂–º–∏ —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å
                  </>
                )}
                {step.action === "swipe" && (
                  <>
                    <span className="text-lg">üëâ</span>
                    –°–≤–∞–π–ø–Ω–∏ —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å
                  </>
                )}
              </p>
            </div>
          )}

          {/* Progress dots */}
          <div className="flex items-center justify-center gap-2 mb-4">
            {TUTORIAL_STEPS.map((_, index) => (
              <div
                key={index}
                className={`h-2 rounded-full transition-all ${
                  index === currentStep
                    ? "w-8 bg-primary"
                    : index < currentStep
                      ? "w-2 bg-primary/50"
                      : "w-2 bg-muted"
                }`}
              />
            ))}
          </div>

          {/* Navigation buttons */}
          <div className="flex gap-2">
            {!isLastStep && (
              <Button variant="outline" onClick={handleSkip} className="flex-1">
                –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å
              </Button>
            )}
            <Button onClick={handleNext} className="flex-1 bg-gradient-to-r from-primary to-secondary">
              {isLastStep ? (
                <>
                  <CheckCircle2 className="w-4 h-4 mr-2" />
                  –ü–æ–Ω—è—Ç–Ω–æ!
                </>
              ) : (
                <>
                  –î–∞–ª–µ–µ
                  <ArrowRight className="w-4 h-4 ml-2" />
                </>
              )}
            </Button>
          </div>
        </Card>
      </div>
    </div>
  )
}
